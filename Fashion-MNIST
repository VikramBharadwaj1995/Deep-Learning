{
  "cells": [
    {
      "metadata": {
        "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
        "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
        "trusted": true
      },
      "cell_type": "code",
      "source": "# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nfrom keras.layers import Activation, Dense, Conv2D, Dropout, MaxPooling2D, Flatten\nfrom keras.models import Sequential\nfrom keras.utils import to_categorical\nimport os\nprint(os.listdir(\"../input\"))",
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": "['fashion-mnist_test.csv', 'fashion-mnist_train.csv', 'train-images-idx3-ubyte', 't10k-images-idx3-ubyte', 't10k-labels-idx1-ubyte', 'train-labels-idx1-ubyte']\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "_cell_guid": "79c7e3d0-c299-4dcb-8224-4455121ee9b0",
        "_uuid": "d629ff2d2480ee46fbb7e2d37f6b5fab8052498a",
        "trusted": true,
        "scrolled": false
      },
      "cell_type": "code",
      "source": "train_df = pd.read_csv(\"../input/fashion-mnist_train.csv\")\ntest_df  = pd.read_csv(\"../input/fashion-mnist_test.csv\")\nprint(\"Size of Training Set:\", train_df.shape)\nprint(\"Size of Testing Set:\", test_df.shape)",
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": "Size of Training Set: (60000, 785)\nSize of Testing Set: (10000, 785)\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "8e01ca018f47fb6ce92e5a750b9de0324276a268"
      },
      "cell_type": "code",
      "source": "train_X = np.array((train_df.iloc[:,1:]))\ntrain_Y = to_categorical(np.array((train_df.iloc[:,0])))\ntest_X  = np.array((test_df.iloc[:,1:]))\ntest_Y  = to_categorical(np.array((test_df.iloc[:,0])))",
      "execution_count": 4,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "95d7f18aeeae5f6744531b3c19475b49759044ac"
      },
      "cell_type": "code",
      "source": "img_rows, img_cols = 28, 28\ntrain_X = train_X.reshape(train_X.shape[0], img_rows, img_cols, 1)\ntest_X  = test_X.reshape(test_X.shape[0], img_rows, img_cols, 1)\ninput_shape = (img_rows, img_cols, 1)\n\nX_train = train_X.astype('float32')\nX_test = test_X.astype('float32')\nX_train /= 255\nX_test /= 255",
      "execution_count": 5,
      "outputs": []
    },
    {
      "metadata": {
        "_kg_hide-output": true,
        "trusted": true,
        "_uuid": "58887bd3791ae1f26d6fd158f08735caa7e4e2f7"
      },
      "cell_type": "code",
      "source": "input_shape = (img_rows, img_cols, 1)\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=input_shape))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(64, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(250, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(10, activation='softmax'))\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])",
      "execution_count": 6,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "088701364fc1f49ee647adb1794d58b7a846d77b"
      },
      "cell_type": "code",
      "source": "model.summary()",
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": "_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\nconv2d_1 (Conv2D)            (None, 26, 26, 32)        320       \n_________________________________________________________________\nmax_pooling2d_1 (MaxPooling2 (None, 13, 13, 32)        0         \n_________________________________________________________________\ndropout_1 (Dropout)          (None, 13, 13, 32)        0         \n_________________________________________________________________\nconv2d_2 (Conv2D)            (None, 11, 11, 64)        18496     \n_________________________________________________________________\nmax_pooling2d_2 (MaxPooling2 (None, 5, 5, 64)          0         \n_________________________________________________________________\ndropout_2 (Dropout)          (None, 5, 5, 64)          0         \n_________________________________________________________________\nflatten_1 (Flatten)          (None, 1600)              0         \n_________________________________________________________________\ndense_1 (Dense)              (None, 250)               400250    \n_________________________________________________________________\ndropout_3 (Dropout)          (None, 250)               0         \n_________________________________________________________________\ndense_2 (Dense)              (None, 10)                2510      \n=================================================================\nTotal params: 421,576\nTrainable params: 421,576\nNon-trainable params: 0\n_________________________________________________________________\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "c8db381a71e0265c0efb836c25ed400fb78fd18b"
      },
      "cell_type": "code",
      "source": "model.fit(X_train, train_Y, batch_size=50, epochs=10, verbose=1, validation_data=(X_test, test_Y))",
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": "Train on 60000 samples, validate on 10000 samples\nEpoch 1/10\n60000/60000 [==============================] - 44s 737us/step - loss: 0.5449 - acc: 0.7999 - val_loss: 0.3546 - val_acc: 0.8726\nEpoch 2/10\n60000/60000 [==============================] - 43s 717us/step - loss: 0.3731 - acc: 0.8641 - val_loss: 0.2932 - val_acc: 0.8944\nEpoch 3/10\n60000/60000 [==============================] - 43s 721us/step - loss: 0.3239 - acc: 0.8817 - val_loss: 0.2809 - val_acc: 0.8980\nEpoch 4/10\n60000/60000 [==============================] - 43s 716us/step - loss: 0.2965 - acc: 0.8904 - val_loss: 0.2510 - val_acc: 0.9085\nEpoch 5/10\n60000/60000 [==============================] - 43s 713us/step - loss: 0.2739 - acc: 0.8986 - val_loss: 0.2401 - val_acc: 0.9104\nEpoch 6/10\n60000/60000 [==============================] - 44s 734us/step - loss: 0.2589 - acc: 0.9034 - val_loss: 0.2349 - val_acc: 0.9130\nEpoch 7/10\n60000/60000 [==============================] - 43s 722us/step - loss: 0.2466 - acc: 0.9086 - val_loss: 0.2212 - val_acc: 0.9181\nEpoch 8/10\n60000/60000 [==============================] - 43s 717us/step - loss: 0.2357 - acc: 0.9118 - val_loss: 0.2249 - val_acc: 0.9162\nEpoch 9/10\n60000/60000 [==============================] - 43s 714us/step - loss: 0.2256 - acc: 0.9158 - val_loss: 0.2113 - val_acc: 0.9233\nEpoch 10/10\n60000/60000 [==============================] - 43s 719us/step - loss: 0.2160 - acc: 0.9179 - val_loss: 0.2093 - val_acc: 0.9224\n",
          "name": "stdout"
        },
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'y_test' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-8-bebbe869a472>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_Y\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_Y\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mscore\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'y_test' is not defined"
          ]
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "4e930803a8150e4a12472716ca962171c41ecdd0"
      },
      "cell_type": "code",
      "source": "score = model.evaluate(X_test, test_Y, verbose=0)",
      "execution_count": 9,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "0a983987cd17deccf77addc0315fa9cf288731b9"
      },
      "cell_type": "code",
      "source": "print(\"Loss:\",score[0])\nprint(\"Accuracy:\",score[1])",
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": "Loss: 0.209311006000638\nAccuracy: 0.9224\n",
          "name": "stdout"
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.6",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 1
}
